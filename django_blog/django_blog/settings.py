"""
Django settings for django_blog project.

Generated by 'django-admin startproject' using Django 5.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
from decouple import config, Csv
import os
import dj_database_url
import cloudinary
import cloudinary.uploader
import cloudinary.api


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY', default='fallback-secret-key')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', default=False, cast=bool)

ALLOWED_HOSTS = config('ALLOWED_HOSTS', default='localhost,127.0.0.1', cast=Csv())




# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/




# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # Ajout des applications du projet
    'accounts',
    'portfolio',

    # Cloudinary
    'cloudinary',
    'cloudinary_storage',
    
    
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    #'debug_toolbar.middleware.DebugToolbarMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# INTERNAL_IPS = [
#     '127.0.0.1',
# ]

ROOT_URLCONF = 'django_blog.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'], 
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'django_blog.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }

# if os.getenv('GITHUB_ACTIONS') == 'true' or os.getenv('DOCKER_ENV') == 'true':
    # DATABASES = {
    #     'default': {
    #         'ENGINE': 'django.db.backends.postgresql',
    #         'NAME': config('POSTGRES_DB'),
    #         'USER': config('POSTGRES_USER'),
    #         'PASSWORD': config('POSTGRES_PASSWORD'),
    #         'HOST': config('POSTGRES_HOST', default='db'),  # "db" = utilisé en local
    #         'PORT': config('POSTGRES_PORT', default=5432, cast=int),
    #     }
    # }
#     DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.postgresql',
#         'NAME': config('POSTGRES_DB', default='default_db'),  # Valeur par défaut
#         'USER': config('POSTGRES_USER', default='default_user'),
#         'PASSWORD': config('POSTGRES_PASSWORD', default='default_password'),
#         'HOST': config('POSTGRES_HOST', default='localhost'),
#         'PORT': config('POSTGRES_PORT', default=5432, cast=int),
#     }
# }
# elif os.getenv('RENDER') == 'true':  
#     DATABASES = {
#         'default': dj_database_url.config(default=config('DATABASE_URL'))
#     }
# else:
#     DATABASES = {
#         'default': dj_database_url.config(default=config('DATABASE_URL'))
#     }

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.postgresql',
#         'NAME': config('POSTGRES_DB'),
#         'USER': config('POSTGRES_USER'),
#         'PASSWORD': config('POSTGRES_PASSWORD'),
#         'HOST': config('POSTGRES_HOST'),
#         'PORT': config('POSTGRES_PORT', default=5432, cast=int),
#     }
# }

# if os.environ.get("CI") == "True":
#     # En CI, on se base uniquement sur les variables d'environnement du système
#     DATABASES = {
#         'default': {
#             'ENGINE': 'django.db.backends.postgresql',
#             'NAME': os.environ.get("POSTGRES_DB"),
#             'USER': os.environ.get("POSTGRES_USER"),
#             'PASSWORD': os.environ.get("POSTGRES_PASSWORD"),
#             'HOST': os.environ.get("POSTGRES_HOST"),
#             'PORT': os.environ.get("POSTGRES_PORT", "5432"),
#         }
#     }
# else:
#     # En local, on lit les variables d'environnement en passant par le fichier .env si nécessaire
#     DATABASES = {
#         'default': {
#             'ENGINE': 'django.db.backends.postgresql',
#             'NAME': config('POSTGRES_DB'),
#             'USER': config('POSTGRES_USER'),
#             'PASSWORD': config('POSTGRES_PASSWORD'),
#             'HOST': config('POSTGRES_HOST', default='db'),
#             'PORT': config('POSTGRES_PORT', default='5432'),
#         }
#     }

# if os.environ.get("CI") == "true":
#     # On récupère directement depuis os.environ
#     POSTGRES_DB = os.environ.get("POSTGRES_DB")
#     POSTGRES_USER = os.environ.get("POSTGRES_USER")
#     POSTGRES_PASSWORD = os.environ.get("POSTGRES_PASSWORD")
#     POSTGRES_HOST = os.environ.get("POSTGRES_HOST")
#     POSTGRES_PORT = os.environ.get("POSTGRES_PORT", "5432")
# else:
#     # En local, on utilise decouple qui charge aussi le fichier .env
#     POSTGRES_DB = config('POSTGRES_DB')
#     POSTGRES_USER = config('POSTGRES_USER')
#     POSTGRES_PASSWORD = config('POSTGRES_PASSWORD')
#     POSTGRES_HOST = config('POSTGRES_HOST', default='db')
#     POSTGRES_PORT = config('POSTGRES_PORT', default='5432')

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.postgresql',
#         'NAME': POSTGRES_DB,
#         'USER': POSTGRES_USER,
#         'PASSWORD': POSTGRES_PASSWORD,
#         'HOST': POSTGRES_HOST,
#         'PORT': POSTGRES_PORT,
#     }
# }

if os.environ.get("CI") == "true":
    # On récupère les variables renommées
    DB_HOST = os.environ.get("PGDB_HOST")
    DB_USER = os.environ.get("PGDB_USER")
    DB_PASSWORD = os.environ.get("PGDB_PASSWORD")
    DB_NAME = os.environ.get("PGDB_DB")
    DB_PORT = os.environ.get("PGDB_PORT", "5432")
else:
    # En local, vous pouvez continuer à utiliser decouple
    # ou charger d'autres noms de variables
    DB_HOST = config('POSTGRES_HOST', default='db')
    DB_USER = config('POSTGRES_USER', default='postgres')
    DB_PASSWORD = config('POSTGRES_PASSWORD', default='postgres')
    DB_NAME = config('POSTGRES_DB', default='postgres')
    DB_PORT = config('POSTGRES_PORT', default='5432')

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': DB_NAME,
        'USER': DB_USER,
        'PASSWORD': DB_PASSWORD,
        'HOST': DB_HOST,
        'PORT': DB_PORT,
    }
}




# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Configuration spécifique pour Cloudinary

cloudinary.config(
    cloud_name=config('CLOUDINARY_CLOUD_NAME', default=''),
    api_key=config('CLOUDINARY_API_KEY', default=''),
    api_secret=config('CLOUDINARY_API_SECRET', default='')
)

# Configuration de  Django pour utiliser Cloudinary
DEFAULT_FILE_STORAGE ='cloudinary_storage.storage.MediaCloudinaryStorage'

# Configuration spécifique pour Render
if os.getenv('RENDER'):
    STATICFILES_STORAGES = 'whitenoise.storage.CompressedManifestStaticFilesStorage'


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]
STATIC8_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Media files (user uploaded files)
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
MEDIA_URL = '/media/'






AUTH_USER_MODEL = 'accounts.UserAccount'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
