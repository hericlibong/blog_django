# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
name: CI Pipeline

on:
  push:
    branches:
      - main
      - development/*

  pull_request:
    branches:
      - main
      - development/*

jobs:
  tests:
    runs-on: ubuntu-latest

    services:
      postgres: # démarre un service postgresql pour la base de données des tests
        image: postgres:16  # version de postgresql compatible avec la version de l'application
        env:
          
          POSTGRES_USER: ${{ secrets.POSTGRES_USER  }} # récupère les variables d'environnement de github
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
        ports: 
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U $POSTGRES_USER"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: installer Python 3.12
        uses: actions/setup-python@v2
        with:
          python-version: 3.12

      - name: installer les dépendances
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
        
      - name: Configurer les variables d'environnement
        run: |
          echo "DJANGO_SECRET_KEY='${{ secrets.DJANGO_SECRET_KEY }}'" >> $GITHUB_ENV
          echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" >> $GITHUB_ENV
          echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> $GITHUB_ENV
          echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> $GITHUB_ENV
          echo "POSTGRES_HOST=localhost" >> $GITHUB_ENV  # Forcer l'utilisation de localhost
          echo "POSTGRES_PORT=5432" >> $GITHUB_ENV
          echo "DATABASE_URL=postgresql://${{ secrets.POSTGRES_USER }}:${{ secrets.POSTGRES_PASSWORD }}@localhost:5432/${{ secrets.POSTGRES_DB }}" >> $GITHUB_ENV
          echo "DJANGO_SETTINGS_MODULE=django_blog.settings" >> $GITHUB_ENV
          echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> $GITHUB_ENV
          echo "CLOUDINARY_CLOUD_NAME=${{ secrets.CLOUDINARY_CLOUD_NAME }}" >> $GITHUB_ENV
          echo "CLOUDINARY_API_KEY=${{ secrets.CLOUDINARY_API_KEY }}" >> $GITHUB_ENV
          echo "CLOUDINARY_API_SECRET=${{ secrets.CLOUDINARY_API_SECRET }}" >> $GITHUB_ENV
      - name: Attendre que PostgreSQL soir prêt
        run: |
          for i in {1..10}; do
            if pg_isready -U ${{ secrets.POSTGRES_USER }} -h localhost -p 5432; then
              break
              fi
            sleep 2
          done    
      
      - name: Exécuter les migration de Django
        working-directory: django_blog
        run: |
          python manage.py migrate
      
      - name: Lancer les tests avec pytest
        working-directory: django_blog
        run: pytest --cov=portfolio --cov=accounts --cov-report=term-missing



      - name: Lint code with Ruff
        working-directory: django_blog
        run: ruff check .

      - name: Format code with Black (fail if not formatted)
        working-directory: django_blog
        run: black --check .


  containerize:
    name: Créer et pousser l'image Docker
    needs: tests
    
    # Remettre les branches sur lesquelles on veut déployer ici

    runs-on: ubuntu-latest
    env:
      CLOUDINARY_URL: ${{ secrets.CLOUDINARY_URL }}  # récupérer les variables d'environnement de github
      CLOUDINARY_CLOUD_NAME: ${{ secrets.CLOUDINARY_CLOUD_NAME }}
      CLOUDINARY_API_KEY: ${{ secrets.CLOUDINARY_API_KEY }}
      CLOUDINARY_API_SECRET: ${{ secrets.CLOUDINARY_API_SECRET }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Connexion sécurisée à Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }} # Utiliser un token pour le mot de passe provenant de Docker Hub test

      # Construction et tagging de l'image Docker
      - name: Build and tag Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/blog_app:${{ github.sha }} .
          docker tag ${{ secrets.DOCKER_USERNAME }}/blog_app:${{ github.sha }} ${{ secrets.DOCKER_USERNAME }}/blog_app:latest

      # Vérification que l'image est bien créée
      - name: Verify Docker image before push
        run: docker images | grep "${{ secrets.DOCKER_USERNAME }}/blog_app"

      # Pousser les images sur Docker Hub
      - name: Push Docker image to Docker Hub
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/blog_app:${{ github.sha }}
          docker push ${{ secrets.DOCKER_USERNAME }}/blog_app:latest

      # Vérifier la disponibilité de l'image après le push
      - name: Wait for Docker image to be available
        run: |
          for i in {1..10}; do
            docker pull ${{ secrets.DOCKER_USERNAME }}/blog_app:latest && break
            echo "Waiting for image availability... ($i/10)"
            sleep 10
          done

  deploy:
    name: Deploy to Render
    needs: containerize
    
    # Remettre les branches sur lesquelles on veut déployer ici

    runs-on: ubuntu-latest
    env:
      RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
      DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
      CLOUDINARY_URL: ${{ secrets.CLOUDINARY_URL }}
      CLOUDINARY_CLOUD_NAME: ${{ secrets.CLOUDINARY_CLOUD_NAME }}
      CLOUDINARY_API_KEY: ${{ secrets.CLOUDINARY_API_KEY }}
      CLOUDINARY_API_SECRET: ${{ secrets.CLOUDINARY_API_SECRET }}
    steps:
      - name: Trigger Render Deploy
        run: |
          curl -X POST "https://api.render.com/v1/services/${{ secrets.RENDER_SERVICE_ID }}/deploys" \
            -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d '{"image": "docker.io/'"${{ secrets.DOCKER_USERNAME }}"'/blog_app:latest"}'
        
    
    

